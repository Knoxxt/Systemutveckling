using GeonBit.UI;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;

namespace Game21
{
    public enum GameState // Created by Anton.
    {
        Menu,
        Game,
        Combat,
        Inventory
    }
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        private Variables var;
        private ReadManager rm;
        private Camera camera;
        private CollisionManager cm;
        private Interface interfaces;
        private float width, height;

        public float Width // Game Window Width
        {
            get { return width; }
            set { width = value; }
        }
        public float Height // Game Window Height
        {
            get { return height; }
            set { height = value; }
        }
        public GameState state = GameState.Menu;
        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        protected override void Initialize()
        {
            camera = new Camera(GraphicsDevice.Viewport);
            var = new Variables();
            height = GraphicsDevice.DisplayMode.Height;
            width = GraphicsDevice.DisplayMode.Width;
            UserInterface.Initialize(Content, BuiltinThemes.hd);
            UserInterface.Active.SetCursor(CursorType.Default);
            graphics.PreferredBackBufferWidth = (int)width;
            graphics.PreferredBackBufferHeight = (int)height;
            graphics.IsFullScreen = true;
            graphics.ApplyChanges();
            base.Initialize();
        }


        protected override void LoadContent()
        {
            var.floor = Content.Load<Texture2D>("floor");
            var.hero = Content.Load<Texture2D>("hero");
            var.menuBG = Content.Load<Texture2D>("bg");
            var.greenMonster = Content.Load<Texture2D>("greenMonster");
            spriteBatch = new SpriteBatch(GraphicsDevice);
            rm = new ReadManager(var);
            cm = new CollisionManager(rm, this);
            interfaces = new Interface(this);
            if (state == GameState.Menu)
            {
                interfaces.Menu();
            }
        }

        protected override void UnloadContent()
        {

        }

        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();
            KeymouseReader.Update();
            if(state == GameState.Game)
            {
                rm.hero.Update(gameTime);
                rm.green.Update(gameTime);
                cm.Update(gameTime);
                camera.Update(gameTime, rm.hero);
            }
            UserInterface.Active.Update(gameTime);
            base.Update(gameTime);
        }


        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            if(state == GameState.Game)
            {
                spriteBatch.Begin(transformMatrix: camera.transform);
                rm.hero.Draw(spriteBatch);
                rm.green.Draw(spriteBatch);
                foreach (Tile t in rm.tileList)
                {
                    t.Draw(spriteBatch);
                }
                spriteBatch.End();
            }
            if(state == GameState.Menu)
            {
                spriteBatch.Begin();
                spriteBatch.Draw(var.menuBG, new Rectangle(0, 0, (int)width, (int)height), Color.White);
                spriteBatch.End();
            }
            UserInterface.Active.Draw(spriteBatch);
            base.Draw(gameTime);
        }


    #region PixelCollision
        public bool IntersectPixel(Rectangle rect1, Color[] data1,
   Rectangle rect2, Color[] data2)
        {
            int top = Math.Max(rect1.Top, rect2.Top);
            int bottom = Math.Min(rect1.Bottom, rect2.Bottom);
            int left = Math.Max(rect1.Left, rect2.Left);
            int right = Math.Min(rect1.Right, rect2.Right);

            for (int y = top; y < bottom; y++)
                for (int x = left; x < right; x++)
                {
                    Color color1 = data1[(x - rect1.Left) + (y - rect1.Top) * rect1.Width];
                    Color color2 = data2[(x - rect2.Left) + (y - rect2.Top) * rect2.Width];

                    if (color1.A != 0 && color2.A != 0)
                    {
                        return true;
                    }
                }


            return false;
        } 
        #endregion // Perpixel collision. Created by Anton. (OBS should be moved).
    }
}
