using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;

namespace Game21
{
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        private Variables var;
        private ReadManager rm;
        private Camera camera;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        protected override void Initialize()
        {
            camera = new Camera(GraphicsDevice.Viewport);
            var = new Variables();
            base.Initialize();
        }


        protected override void LoadContent()
        {
            var.floor = Content.Load<Texture2D>("floor");
            var.hero = Content.Load<Texture2D>("hero");
            spriteBatch = new SpriteBatch(GraphicsDevice);
            rm = new ReadManager(var.floor, var.hero, var.floorRec, var.heroRec);

        }

        protected override void UnloadContent()
        {

        }

        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();
            KeymouseReader.Update();
            rm.hero.Update(gameTime);
            foreach (Tile t in rm.tileList)
            {
                t.Update(gameTime);
                if (rm.hero.hitbox.Intersects(t.hitbox))
                {
                    if(IntersectPixel(rm.hero.hitbox, rm.hero.textureData, t.hitbox, t.textureData))
                    {
                        rm.hero.hasJumped = false;
                        rm.hero.velocity.Y = 0f;
                        break;
                    }
                    else
                    {
                        rm.hero.hasJumped = true;
                    }
                }
                else
                {
                    rm.hero.hasJumped = true;
                }
            }

            if (rm.hero.hasJumped)
            {
                Window.Title = "True";
            }
            else if (!rm.hero.hasJumped)
            {
                Window.Title = "False";
            }
            camera.Update(gameTime, rm.hero);
            base.Update(gameTime);
        }


        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            spriteBatch.Begin(transformMatrix: camera.transform);
            rm.hero.Draw(spriteBatch);
            foreach (Tile t in rm.tileList)
            {
                t.Draw(spriteBatch);
            }
            spriteBatch.End();

            base.Draw(gameTime);
        }


        public static bool IntersectPixel(Rectangle rect1, Color[] data1,
           Rectangle rect2, Color[] data2)
        {
            int top = Math.Max(rect1.Top, rect2.Top);
            int bottom = Math.Min(rect1.Bottom, rect2.Bottom);
            int left = Math.Max(rect1.Left, rect2.Left);
            int right = Math.Min(rect1.Right, rect2.Right);

            for (int y = top; y < bottom; y++)
                for (int x = left; x < right; x++)
                {
                    Color color1 = data1[(x - rect1.Left) + (y - rect1.Top) * rect1.Width];
                    Color color2 = data2[(x - rect2.Left) + (y - rect2.Top) * rect2.Width];

                    if (color1.A != 0 && color2.A != 0)
                    {
                        return true;
                    }
                }


            return false;
        }
    }
}
